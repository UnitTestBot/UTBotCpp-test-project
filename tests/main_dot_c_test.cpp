/*
 * This file is automatically generated by UnitTestBot. For further information seehttps://unittestbot.org
 */

#include "main_dot_c_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;


#pragma region regression
TEST(regression, main_test_1)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', '{'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_29_0 = 0; it_29_0 < 2; it_29_0 ++) {
        argv[it_29_0] = _argv[it_29_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', '{'}};
    for (int it_30_0 = 0; it_30_0 < 2; it_30_0 ++) {
        for (int it_30_1 = 0; it_30_1 < 2; it_30_1 ++) {
            EXPECT_EQ(expected_argv[it_30_0][it_30_1], _argv[it_30_0][it_30_1]);
        }
    }
}

TEST(regression, main_test_2)
{
    char _argv[2][2] = {{'c', 'c'}, {'7', '<'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_31_0 = 0; it_31_0 < 2; it_31_0 ++) {
        argv[it_31_0] = _argv[it_31_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(7, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'7', '<'}};
    for (int it_32_0 = 0; it_32_0 < 2; it_32_0 ++) {
        for (int it_32_1 = 0; it_32_1 < 2; it_32_1 ++) {
            EXPECT_EQ(expected_argv[it_32_0][it_32_1], _argv[it_32_0][it_32_1]);
        }
    }
}

TEST(regression, main_test_3)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', 'c'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_33_0 = 0; it_33_0 < 2; it_33_0 ++) {
        argv[it_33_0] = _argv[it_33_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', 'c'}};
    for (int it_34_0 = 0; it_34_0 < 2; it_34_0 ++) {
        for (int it_34_1 = 0; it_34_1 < 2; it_34_1 ++) {
            EXPECT_EQ(expected_argv[it_34_0][it_34_1], _argv[it_34_0][it_34_1]);
        }
    }
}

TEST(regression, main_test_4)
{
    char _argv[2][2] = {{'c', 'c'}, {'\f', '\0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_35_0 = 0; it_35_0 < 2; it_35_0 ++) {
        argv[it_35_0] = _argv[it_35_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'\f', '\0'}};
    for (int it_36_0 = 0; it_36_0 < 2; it_36_0 ++) {
        for (int it_36_1 = 0; it_36_1 < 2; it_36_1 ++) {
            EXPECT_EQ(expected_argv[it_36_0][it_36_1], _argv[it_36_0][it_36_1]);
        }
    }
}

TEST(regression, main_test_5)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', 'B'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_37_0 = 0; it_37_0 < 2; it_37_0 ++) {
        argv[it_37_0] = _argv[it_37_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', 'B'}};
    for (int it_38_0 = 0; it_38_0 < 2; it_38_0 ++) {
        for (int it_38_1 = 0; it_38_1 < 2; it_38_1 ++) {
            EXPECT_EQ(expected_argv[it_38_0][it_38_1], _argv[it_38_0][it_38_1]);
        }
    }
}

TEST(regression, main_test_6)
{
    char _argv[2][2] = {{'c', 'c'}, {'7', 'B'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_39_0 = 0; it_39_0 < 2; it_39_0 ++) {
        argv[it_39_0] = _argv[it_39_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(7, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'7', 'B'}};
    for (int it_40_0 = 0; it_40_0 < 2; it_40_0 ++) {
        for (int it_40_1 = 0; it_40_1 < 2; it_40_1 ++) {
            EXPECT_EQ(expected_argv[it_40_0][it_40_1], _argv[it_40_0][it_40_1]);
        }
    }
}

TEST(regression, main_test_7)
{
    char _argv[2][2] = {{'c', 'c'}, {'c', 'c'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_41_0 = 0; it_41_0 < 2; it_41_0 ++) {
        argv[it_41_0] = _argv[it_41_0];
    }
    argv[2] = NULL;
    int actual = main(0, argv);
    EXPECT_EQ(1, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'c', 'c'}};
    for (int it_42_0 = 0; it_42_0 < 2; it_42_0 ++) {
        for (int it_42_1 = 0; it_42_1 < 2; it_42_1 ++) {
            EXPECT_EQ(expected_argv[it_42_0][it_42_1], _argv[it_42_0][it_42_1]);
        }
    }
}

TEST(regression, main_test_8)
{
    char _argv[2][2] = {{'c', 'c'}, {'\f', 'B'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_43_0 = 0; it_43_0 < 2; it_43_0 ++) {
        argv[it_43_0] = _argv[it_43_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'\f', 'B'}};
    for (int it_44_0 = 0; it_44_0 < 2; it_44_0 ++) {
        for (int it_44_1 = 0; it_44_1 < 2; it_44_1 ++) {
            EXPECT_EQ(expected_argv[it_44_0][it_44_1], _argv[it_44_0][it_44_1]);
        }
    }
}

TEST(regression, main_test_9)
{
    char _argv[2][2] = {{'c', 'c'}, {'\f', 'h'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_45_0 = 0; it_45_0 < 2; it_45_0 ++) {
        argv[it_45_0] = _argv[it_45_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'\f', 'h'}};
    for (int it_46_0 = 0; it_46_0 < 2; it_46_0 ++) {
        for (int it_46_1 = 0; it_46_1 < 2; it_46_1 ++) {
            EXPECT_EQ(expected_argv[it_46_0][it_46_1], _argv[it_46_0][it_46_1]);
        }
    }
}

TEST(regression, main_test_10)
{
    char _argv[2][2] = {{'c', 'c'}, {'1', '<'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_47_0 = 0; it_47_0 < 2; it_47_0 ++) {
        argv[it_47_0] = _argv[it_47_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(3, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'1', '<'}};
    for (int it_48_0 = 0; it_48_0 < 2; it_48_0 ++) {
        for (int it_48_1 = 0; it_48_1 < 2; it_48_1 ++) {
            EXPECT_EQ(expected_argv[it_48_0][it_48_1], _argv[it_48_0][it_48_1]);
        }
    }
}

TEST(regression, main_test_11)
{
    char _argv[2][2] = {{'c', 'c'}, {'\f', ':'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_49_0 = 0; it_49_0 < 2; it_49_0 ++) {
        argv[it_49_0] = _argv[it_49_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'\f', ':'}};
    for (int it_50_0 = 0; it_50_0 < 2; it_50_0 ++) {
        for (int it_50_1 = 0; it_50_1 < 2; it_50_1 ++) {
            EXPECT_EQ(expected_argv[it_50_0][it_50_1], _argv[it_50_0][it_50_1]);
        }
    }
}

TEST(regression, main_test_12)
{
    char _argv[2][2] = {{'c', 'c'}, {'1', '\0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_51_0 = 0; it_51_0 < 2; it_51_0 ++) {
        argv[it_51_0] = _argv[it_51_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(3, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'1', '\0'}};
    for (int it_52_0 = 0; it_52_0 < 2; it_52_0 ++) {
        for (int it_52_1 = 0; it_52_1 < 2; it_52_1 ++) {
            EXPECT_EQ(expected_argv[it_52_0][it_52_1], _argv[it_52_0][it_52_1]);
        }
    }
}

#pragma endregion
#pragma region error
TEST(error, main_test_13)
{
    char _argv[2][2] = {{'c', 'c'}, {'\n', '-'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_53_0 = 0; it_53_0 < 2; it_53_0 ++) {
        argv[it_53_0] = _argv[it_53_0];
    }
    argv[2] = NULL;
    main(2, argv);
}

TEST(error, main_test_14)
{
    char _argv[2][2] = {{'c', 'c'}, {'\n', '+'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_54_0 = 0; it_54_0 < 2; it_54_0 ++) {
        argv[it_54_0] = _argv[it_54_0];
    }
    argv[2] = NULL;
    main(2, argv);
}

TEST(error, main_test_15)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', '0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_55_0 = 0; it_55_0 < 2; it_55_0 ++) {
        argv[it_55_0] = _argv[it_55_0];
    }
    argv[2] = NULL;
    main(2, argv);
}

TEST(error, main_test_16)
{
    char _argv[2][2] = {{'c', 'c'}, {'\n', '\r'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_56_0 = 0; it_56_0 < 2; it_56_0 ++) {
        argv[it_56_0] = _argv[it_56_0];
    }
    argv[2] = NULL;
    main(2, argv);
}

#pragma endregion
}
